# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Tendency {
  id: String!
  name: String!
  users: [User!]!
}

type Type {
  id: String!
  name: String!
  users: [User!]!
}

type ChatRoom {
  id: String!
  name: String!
  project: Project!
  chatRoomMembers: [ChatRoomMember!]!
}

type ChatRoomMember {
  id: String!
  createdAt: DateTime!
  chatRoom: ChatRoom!
  user: User!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: String!
  email: String!
  name: String!
  createdAt: DateTime!
  deletedAt: DateTime
  career: CAREER_ENUM
  point: Int!
  tendencys: [Tendency!]
  position: Position
  types: [Type!]
  chatRoomMembers: [ChatRoomMember!]!
}

enum CAREER_ENUM {
  STUDENT
  JOBSEEKER
  NEWCOMER
}

type Board {
  id: String!
  title: String!
  content: String!
  user: User!
  project: Project!
}

type Region {
  id: String!
  name: String!
}

type Location {
  id: String!
  name: String!
  region: Region!
}

type Platform {
  id: String!
  name: String!
  projects: [Project!]!
}

type Project {
  id: String!
  name: String!
  teamname: String!
  intro: String!
  method: METHOD_ENUM!
  recruitDate: DateTime!
  imgUrl: String!
  skill: String!
  description: String!
  isComplete: Boolean!
  type: Type!
  location: Location!
  leader: User!
  projectToPositions: [ProjectToPosition!]!
  platforms: [Platform!]!
  createdAt: DateTime!
  deletedAt: DateTime!
}

enum METHOD_ENUM {
  MEET
  UNTACT
  MEDIATE
}

type ProjectToPosition {
  id: String!
  project: Project!
  position: Position!
  number: Int!
}

type Position {
  id: String!
  name: String!
  projectToPositions: [ProjectToPosition!]!
}

type Token {
  accessToken: String!
  onboarding: Boolean
}

type PointPayment {
  id: String!
  impUid: String!
  amount: Int!
  status: POINT_PAYMENT_STATUS_ENUM!
}

enum POINT_PAYMENT_STATUS_ENUM {
  PAYMENT
  CANCEL
}

type Query {
  fetchLocations: [Location!]!
  fetchPlatforms: [Platform!]!
  fetchPositions: [Position!]!
  fetchProject(projectId: String!): Project!
  fetchProjects(page: Float!): [Project!]!
  fetchRegions: [Region!]!
  fetchTendencys: [Tendency!]!
  fetchTypes: [Type!]!
  fetchUser: User!
  fetchBoard(boardId: String!): Board!
}

type Mutation {
  login(email: String!, password: String!): Token!
  restoreAccessToken: Token!
  logout: String!
  uploadFile(files: [Upload!]!): [String!]!
  createLocation(name: String!): Location!
  createPlatform(name: String!): Platform!
  createPointPayment(impUid: String!, amount: Float!): PointPayment!
  cancelPointPayment(impUid: String!): PointPayment!
  createPosition(name: String!): Position!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createRegion(name: String!): Region!
  createTendency(name: String!): Tendency!
  createType(name: String!): Type!
  sendTokenToEmail(email: String!): String!
  checkTokenToEmail(email: String!, token: String!): Boolean!
  createUser(createUserInput: CreateUserInput!): User!
  updateUserByOnboard(updateUserOnboardInput: UpdateUserOnboardInput!): User!
  createBoard(createBoardInput: CreateBoardInput!, projectId: String!): Board!
  updateBoard(boardId: String!, updateBoardInput: UpdateBoardInput!): Board!
  deleteBoard(boardId: String!): Boolean!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateProjectInput {
  name: String!
  teamname: String!
  intro: String!
  method: METHOD_ENUM!
  recruitDate: DateTime!
  imgUrl: String!
  skill: String!
  description: String!
  typeId: String!
  locationId: String!
  positionIds: [String!]!
  numbers: [Int!]!
  platformIds: [String!]!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

input UpdateUserOnboardInput {
  career: CAREER_ENUM
  tendencyId: [String!]!
  positionId: String!
  typeId: [String!]!
}

input CreateBoardInput {
  title: String!
  content: String!
}

input UpdateBoardInput {
  title: String
  content: String
}